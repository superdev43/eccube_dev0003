<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2021-07-20 10:45:27              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2\Controller;use Eccube\Entity\Delivery;use Eccube\Entity\OrderItem;use Eccube\Repository\DeliveryRepository;use Eccube\Repository\Master\OrderStatusRepository;use Eccube\Repository\OrderRepository;use Plugin\AmazonPayV2\Repository\ConfigRepository;use Plugin\AmazonPayV2\Service\AmazonOrderHelper;use Plugin\AmazonPayV2\Service\AmazonRequestService;use Plugin\AmazonPayV2\Service\Method\AmazonPay;use Eccube\Common\EccubeConfig;use Eccube\Controller\AbstractShoppingController;use Eccube\Entity\Order;use Eccube\Entity\Shipping;use Eccube\Entity\Master\OrderStatus;use Eccube\Form\Type\Shopping\OrderType;use Eccube\Repository\CustomerRepository;use Eccube\Repository\Master\PrefRepository;use Eccube\Repository\ProductClassRepository;use Eccube\Repository\PluginRepository;use Eccube\Service\CartService;use Eccube\Service\MailService;use Eccube\Service\OrderHelper;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\PurchaseFlow;use Plugin\AmazonPayV2\Exception\AmazonPaymentException;use Plugin\AmazonPayV2\Amazon\Pay\API\Client;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Symfony\Component\Routing\Annotation\Route;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormError;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;use Symfony\Component\HttpFoundation\RedirectResponse;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;use Symfony\Component\Routing\Generator\UrlGeneratorInterface;use Symfony\Component\Routing\RouterInterface;use Symfony\Component\Validator\Validator\ValidatorInterface;use Symfony\Component\Validator\Constraints as Assert;use Doctrine\DBAL\LockMode;class AmazonShoppingController extends AbstractShoppingController{private $sessionAmazonProfileKey = 'amazon_pay_v2.profile';private $sessionAmazonCheckoutSessionIdKey = 'amazon_pay_v2.checkout_session_id';private $sessionAmazonCustomerParamKey = 'amazon_pay_v2.customer_regist_v2';private $sessionAmazonCustomerErrorKey = 'amazon_pay_v2.customer_regist_v2_error';private $sessionIsShippingRefresh = 'amazon_pay_v2.is_shipping_refresh';protected $validator;protected $cartService;protected $amazonOrderHelper;public function __construct(EccubeConfig $eccubeConfig, PurchaseFlow $cartPurchaseFlow, CartService $cartService, MailService $mailService, OrderHelper $orderHelper, CustomerRepository $customerRepository, OrderRepository $orderRepository, OrderStatusRepository $orderStatusRepository, PrefRepository $prefRepository, ProductClassRepository $productClassRepository, PluginRepository $pluginRepository, ConfigRepository $configRepository, AmazonOrderHelper $amazonOrderHelper, AmazonRequestService $amazonRequestService, ValidatorInterface $validator, EncoderFactoryInterface $encoderFactory, TokenStorageInterface $tokenStorage, DeliveryRepository $deliveryRepository){goto eRlFh;YdEw5:$this->orderHelper = $orderHelper;goto ejd8f;ejd8f:$this->customerRepository = $customerRepository;goto xcaD1;jDHzU:$this->prefRepository = $prefRepository;goto L0Loj;xcaD1:$this->orderRepository = $orderRepository;goto H4PEE;na07z:$this->mailService = $mailService;goto YdEw5;RxJsf:$this->validator = $validator;goto ZkrvX;YpLC5:$this->cartService = $cartService;goto na07z;eRlFh:$this->eccubeConfig = $eccubeConfig;goto hTrya;NhqMm:$this->Config = $configRepository->get();goto Dum8Y;L0Loj:$this->productClassRepository = $productClassRepository;goto s4a9v;ZkrvX:$this->encoderFactory = $encoderFactory;goto oB0Vu;hTrya:$this->purchaseFlow = $cartPurchaseFlow;goto YpLC5;eZPnQ:$this->amazonRequestService = $amazonRequestService;goto RxJsf;s4a9v:$this->pluginRepository = $pluginRepository;goto NhqMm;Dum8Y:$this->amazonOrderHelper = $amazonOrderHelper;goto eZPnQ;H4PEE:$this->orderStatusRepository = $orderStatusRepository;goto jDHzU;SIh6X:$this->deliveryRepository = $deliveryRepository;goto kxRBF;oB0Vu:$this->tokenStorage = $tokenStorage;goto SIh6X;kxRBF:}    /**
     * @Route("/shopping/amazon_pay", name="amazon_pay_shopping")
     * @Template("Shopping/index.twig")
     *
     * @param Request $request
     */
public function index(Request $request, PurchaseFlow $cartPurchaseFlow){goto TP5dq;kmls9:if (!($initOrderFlg && $AmazonDefaultDelivery)) {goto u_C96;}goto sJsB4;vHlPz:logs('amazon_pay_v2')->info('[注文手続] 受注の初期化処理を開始します.');goto UIDCU;ia5Yr:$arrAmazonCustomerParam = ['customer_regist_v2' => true, 'mail_magazine' => true, 'login_check_v2' => 'regist', 'amazon_login_email_v2' => null, 'amazon_login_password_v2' => null];goto F3Oee;izGlh:McBFj:goto KYkcT;pLmhc:$Shipping = $Order->getShippings()->first();goto hl7Kf;HfHQc:$this->entityManager->flush();goto IhVD7;TP5dq:logs('amazon_pay_v2')->info('AmazonShopping::index start.');goto d_3ht;StXFX:$form->handleRequest($request);goto OdkKf;z6g1U:$arrAmazonCustomerParam['customer_regist_v2'] = false;goto LOTbe;oPq6x:$Cart->setPreOrderId(null);goto D0UKm;AeuKY:j3xS8:goto kmls9;wsEhV:logs('amazon_pay_v2')->info('[注文手続] Errorが発生したため購入エラー画面へ遷移します.', [$flowResult->getErrors()]);goto C7IfO;VB8nS:cjqlG:goto MWBmX;iQhqT:$this->session->set(OrderHelper::SESSION_NON_MEMBER, $Customer);goto I6iZt;Ec66g:aboVd:goto StXFX;C7IfO:return $this->redirectToRoute('shopping_error');goto gDgt3;Jg8VH:fbPNF:goto GI32S;KYkcT:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto Ec66g;n3c3E:logs('amazon_pay_v2')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto emsYR;mIp6j:$amazonCheckoutSessionId = $this->session->get($this->sessionAmazonCheckoutSessionIdKey);goto QhPE5;h76N2:$this->addError('Amazon Payでご利用できる配送方法が存在しません。');goto AeuKY;rQHJb:$initOrderFlg = true;goto qrAOp;h6NLY:rxl5X:goto jTAut;JbE9l:if (!($amazonCustomerError = $this->session->get($this->sessionAmazonCustomerErrorKey))) {goto aboVd;}goto lnkX3;UIDCU:$Customer = $this->getUser() ? $this->getUser() : $this->amazonOrderHelper->getOrderer($checkoutSession->shippingAddress);goto aekDz;PD7Wa:if ($Order = $this->orderHelper->getPurchaseProcessingOrder($Cart->getPreOrderId())) {goto pt1HI;}goto rQHJb;h6y4w:if ($amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey)) {goto TffFt;}goto ia5Yr;MoHhI:$this->cartService->save();goto ZzL92;QmAxe:if (!($AmazonDefaultDelivery === false)) {goto j3xS8;}goto h76N2;GI32S:$form = $this->createForm(OrderType::class, $Order);goto TpDEl;OdkKf:logs('amazon_pay_v2')->info('AmazonShopping::index end.');goto AXBmY;qrAOp:goto rxl5X;goto QUNIe;emsYR:return $this->redirectToRoute('cart');goto VkZf_;fLfDq:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto J3BH2;lnkX3:$arrAmazonCustomerError = unserialize($amazonCustomerError);goto gsg8N;IFKxj:$flowResult = $this->executePurchaseFlow($Order, false);goto ccYpz;D0UKm:YCL4v:goto h6NLY;NKYiH:if (!($checkoutSession && $checkoutSession->statusDetails->state !== 'Open')) {goto lgrlU;}goto yKJHT;KHV6r:logs('amazon_pay_v2')->info('[注文手続] Warningが発生しました.', [$flowResult->getWarning()]);goto YY_UJ;I6iZt:Dqf3I:goto C2zlM;J3BH2:k0Cn2:goto JbE9l;VkZf_:AsBD8:goto mIp6j;l1_xq:if (!$Order->isMultiple()) {goto YCL4v;}goto oPq6x;YY_UJ:$cartPurchaseFlow->validate($Cart, new PurchaseContext());goto MoHhI;MWBmX:logs('amazon_pay_v2')->info('[注文手続] 集計処理を開始します.', [$Order->getId()]);goto IFKxj;QUNIe:pt1HI:goto l1_xq;d_3ht:$Cart = $this->cartService->getCart();goto k46R0;UAouV:lgrlU:goto vHlPz;k46R0:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto AsBD8;}goto n3c3E;mex4U:$Order = $this->amazonOrderHelper->initializeAmazonOrder($Order, $Customer);goto vJt1l;SfrlT:$this->amazonOrderHelper->convert($Shippings->first(), $checkoutSession->shippingAddress);goto HfHQc;TpDEl:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto k0Cn2;}goto fLfDq;AXBmY:return ['form' => $form->createView(), 'Order' => $Order, 'AmazonCustomer' => $arrAmazonCustomerParam, 'AmazonPaymentDescriptor' => $checkoutSession->paymentPreferences[0]->paymentDescriptor, 'AmazonShippingAddress' => $checkoutSession->shippingAddress];goto friv_;sJsB4:$Shipping->setDelivery($AmazonDefaultDelivery);goto a1jWA;lvyNX:return $this->redirectToRoute('shopping_error');goto UAouV;ZzL92:gCqUI:goto h6y4w;ccYpz:$this->entityManager->flush();goto nBKXP;hl7Kf:$AmazonDefaultDelivery = $this->getAmazonPayDefaultDelivery($Shipping);goto QmAxe;LOTbe:vqQoj:goto OUhSL;gvmyB:if (!empty($arrAmazonCustomerParam['customer_regist_v2'])) {goto vqQoj;}goto z6g1U;nBKXP:if (!$flowResult->hasError()) {goto UL0No;}goto wsEhV;frkxX:$arrAmazonCustomerParam['mail_magazine'] = false;goto TcPXN;N3Bce:$this->entityManager->flush();goto y2bkl;EgPZF:$this->session->remove($this->sessionAmazonCheckoutSessionIdKey);goto lvyNX;c_trR:if (!$flowResult->hasWarning()) {goto gCqUI;}goto KHV6r;aekDz:if ($this->isGranted('ROLE_USER')) {goto Dqf3I;}goto iQhqT;QhPE5:$checkoutSession = $this->amazonRequestService->getCheckoutSession($amazonCheckoutSessionId);goto NKYiH;d1llj:TffFt:goto FAFV8;IhVD7:$this->session->remove($this->sessionIsShippingRefresh);goto VB8nS;gDgt3:UL0No:goto c_trR;gsg8N:foreach ($arrAmazonCustomerError as $key => $val) {$form[$key]->addError(new FormError($val));S5XM2:}goto izGlh;C2zlM:$initOrderFlg = false;goto PD7Wa;FAFV8:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto gvmyB;y2bkl:u_C96:goto mex4U;F3Oee:goto fbPNF;goto d1llj;yKJHT:logs('amazon_pay_v2')->info('[注文手続] CheckoutSessionがOpenで無い為決済処理を中断します.', ['CheckoutSessionId => $amazonCheckoutSessionId']);goto EgPZF;TcPXN:sKLSb:goto Jg8VH;Iva48:$Shippings = $Order->getShippings();goto SfrlT;jTAut:$Order = $this->orderHelper->initializeOrder($Cart, $Customer);goto pLmhc;vJt1l:if (!$this->session->get($this->sessionIsShippingRefresh)) {goto cjqlG;}goto Iva48;a1jWA:$Shipping->setShippingDeliveryName($AmazonDefaultDelivery->getName());goto N3Bce;OUhSL:if (!empty($arrAmazonCustomerParam['mail_magazine'])) {goto sKLSb;}goto frkxX;friv_:}    /**
     * ご注文内容のご確認
     *
     * @Route("/shopping/amazon_pay/confirm", name="amazon_pay_shopping_confirm", methods={"POST"})
     * @Template("Shopping/confirm.twig")
     */
public function confirm(Request $request){goto OXzdW;R6V3E:return ['form' => $form->createView(), 'Order' => $Order];goto jSAw3;VH5Fh:Rox_i:goto y3ObO;lcz1x:logs('amazon_pay_v2')->info('[注文確認] PaymentMethod::verifyのエラーのため, 注文手続き画面へ遷移します.', [$PaymentResult->getErrors()]);goto xkADm;U5A8o:return $this->redirectToRoute('amazon_pay_shopping');goto a0I3f;a3kkp:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto QabF7;}goto YepMn;a_Yz7:M0cFQ:goto dx7UR;y3ObO:logs('amazon_pay_v2')->info('[注文確認] PaymentMethod::verifyを実行します.', [$Order->getPayment()->getMethodClass()]);goto GEeki;Y24Sf:if (!($arrAmazonCustomerError = $this->checkAmazonCustomerError($request, $form, $Order))) {goto kHJuP;}goto xY1NJ;kcDb4:$response = $this->executePurchaseFlow($Order);goto PvKqd;zo_po:$this->entityManager->flush();goto mCJAv;QDpzA:if (!($form->isSubmitted() && $form->isValid())) {goto qwt5z;}goto emoYU;B2tGe:kDcyc:goto KtreU;OXzdW:logs('amazon_pay_v2')->info('AmazonShopping::confirm start.');goto CrSb4;b0vUa:eqANk:goto XUayu;mCJAv:logs('amazon_pay_v2')->info('[注文確認] 注文確認画面を表示します.');goto R6V3E;dx7UR:$response = $PaymentResult->getResponse();goto K_eSm;KtreU:RAc6x:goto zo_po;O7KvJ:$PaymentResult = $paymentMethod->verify();goto qJvVD;LCLR6:return $this->redirectToRoute('amazon_pay_shopping');goto VH5Fh;OcnDp:return $this->redirectToRoute('shopping_error');goto b0vUa;IGuI4:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto AwXXY;cJzsU:QabF7:goto qI8WB;xY1NJ:$this->session->set($this->sessionAmazonCustomerErrorKey, serialize($arrAmazonCustomerError));goto U5A8o;xkADm:return $this->redirectToRoute('amazon_pay_shopping');goto a_Yz7;zEz4k:foreach ($PaymentResult->getErrors() as $error) {$this->addError($error);ZBTIQ:}goto EDXj0;GEeki:$paymentMethod = $this->createPaymentMethod($Order, $form);goto O7KvJ;PvKqd:$this->entityManager->flush();goto fE_hS;x9LKN:$this->entityManager->flush();goto W669j;EKzsE:$form->handleRequest($request);goto Y24Sf;OyPDB:return $this->redirectToRoute('cart');goto cJzsU;fE_hS:if (!$response) {goto Rox_i;}goto LCLR6;jSAw3:qwt5z:goto U89rc;U89rc:logs('amazon_pay_v2')->info('[注文確認] フォームエラーのため, 注文手続画面へ遷移します', [$Order->getId()]);goto oREd9;WvP0w:if ($Order) {goto eqANk;}goto C1MHo;emoYU:logs('amazon_pay_v2')->info('[注文確認] 集計処理を開始します.', [$Order->getId()]);goto kcDb4;e1Duc:$this->entityManager->rollback();goto zEz4k;YepMn:logs('amazon_pay_v2')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto OyPDB;oREd9:return $this->redirectToRoute('amazon_pay_shopping', ['request' => $request], 307);goto KvvXe;PyzeP:if ($PaymentResult->isSuccess()) {goto M0cFQ;}goto e1Duc;K_eSm:if (!($response && ($response->isRedirection() || $response->getContent()))) {goto kDcyc;}goto x9LKN;S3N13:R6DIB:goto EKzsE;rx3uf:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto WvP0w;qJvVD:if (!$PaymentResult) {goto RAc6x;}goto PyzeP;CrSb4:$Cart = $this->cartService->getCart();goto a3kkp;EDXj0:Y0ECX:goto lcz1x;K1dYK:return $response;goto B2tGe;C1MHo:logs('amazon_pay_v2')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto OcnDp;a0I3f:kHJuP:goto QDpzA;o0hpb:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto S3N13;W669j:logs('amazon_pay_v2')->info('[注文確認] PaymentMethod::verifyが指定したレスポンスを表示します.');goto K1dYK;wvYob:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto R6DIB;}goto o0hpb;AwXXY:$form = $this->createForm(OrderType::class, $Order);goto wvYob;qI8WB:$preOrderId = $this->cartService->getPreOrderId();goto rx3uf;XUayu:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto IGuI4;KvvXe:}    /**
     * 購入処理
     *
     * @Route("/shopping/amazon_pay/checkout", name="amazon_pay_shopping_checkout", methods={"POST"})
     * @Template("Shopping/index.twig")
     */
public function checkout(Request $request){goto sFJnY;K3CMv:logs('amazon_pay_v2')->error('[注文手続] 都道府県割当エラー', [$Order->getId()]);goto v0qBs;eLYJ7:return $this->redirectToRoute('cart');goto sLEAe;v0qBs:return $this->redirectToRoute('shopping_error');goto U9J68;Gl5Hr:return $this->redirectToRoute('amazon_pay_shopping');goto kncA2;ABko9:logs('amazon_pay_v2')->info('購入チェックエラー', [$Order->getId()]);goto RnXPb;cZrSC:$preOrderId = $this->cartService->getPreOrderId();goto it0FU;lrcPp:return $this->redirectToRoute('amazon_pay_shopping');goto Es1qb;IyXiy:$this->session->set($this->sessionIsShippingRefresh, true);goto lrcPp;kncA2:jH2ze:goto lyUOO;j7AVb:XjYk0:goto pPifP;emQC6:if (!$response) {goto jH2ze;}goto Gl5Hr;ygnVq:dCMMF:goto ABko9;roeyL:ipM4W:goto qlPia;uvCS7:return $this->redirectToRoute('shopping_error');goto Jeyr0;ir9QY:$Order->setAmazonPayV2SessionTemp(serialize($session_temp));goto lHgun;AmhSC:$shippingDifference = $this->checkShippingDifference($Order, $checkoutSession->shippingAddress);goto YetA_;DAvib:$form = $this->createForm(OrderType::class, $Order, ['skip_add_form' => true]);goto QyHK1;G_5_I:BdTke:goto eh7up;ILWwv:if (!($form->isSubmitted() && $form->isValid())) {goto dCMMF;}goto JFYR8;dcYzT:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::applyを実行します.');goto kMKL3;JFYR8:$checkoutSession = $this->amazonRequestService->updateCheckoutSession($Order, $amazonCheckoutSessionId);goto dI1RO;fIqrF:return $response;goto FEyPe;ZEU4n:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto WStyB;QwwwJ:$checkoutSession = $this->amazonRequestService->getCheckoutSession($amazonCheckoutSessionId);goto AmhSC;Jn0YT:$this->addError('amazon_pay_v2.front.shopping.undefined_pref_error');goto K3CMv;QyHK1:goto M4Eic;goto aU_xN;aU_xN:SwMYV:goto pvRo4;wL0B7:if ($Order) {goto s_B2P;}goto j8zYy;k2NLY:logs('amazon_pay_v2')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto eLYJ7;Up9LD:return $this->redirectToRoute('amazon_pay_shopping');goto roeyL;OjUNo:$this->addError('予期しないエラーが発生しました。');goto WXAl8;MX8_N:$form->handleRequest($request);goto JpyGP;oUDRT:osw8f:goto HDagf;mATPf:$amazonCheckoutSessionId = $this->session->get($this->sessionAmazonCheckoutSessionIdKey);goto QwwwJ;CY0wN:$Cart = $this->cartService->getCart();goto somfP;ytRXd:$this->entityManager->flush();goto emQC6;sLEAe:vkxB1:goto cZrSC;mSSPv:$response = $this->executePurchaseFlow($Order);goto ytRXd;ig749:M4Eic:goto ILGgR;YQKYE:$session_temp = ['IS_AUTHENTICATED_FULLY' => $this->isGranted('IS_AUTHENTICATED_FULLY'), $this->sessionAmazonCheckoutSessionIdKey => $amazonCheckoutSessionId, $this->sessionAmazonProfileKey => unserialize($this->session->get($this->sessionAmazonProfileKey)), $this->sessionAmazonCustomerParamKey => unserialize($this->session->get($this->sessionAmazonCustomerParamKey))];goto ir9QY;jtxTp:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto aXdpU;s6a4x:if (!($checkoutSession && $checkoutSession->statusDetails->state !== 'Open')) {goto BdTke;}goto oT2vj;KbWzR:return new RedirectResponse($checkoutSession->webCheckoutDetails->amazonPayRedirectUrl);goto ygnVq;j8zYy:logs('amazon_pay_v2')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto uvCS7;SbJK7:if ($this->amazonOrderHelper->checkShippingPref($checkoutSession->shippingAddress)) {goto R5Qi4;}goto Jn0YT;RnXPb:return $this->redirectToRoute('amazon_pay_shopping', ['request' => $request], 307);goto gsBrz;FEyPe:r3RV2:goto YQKYE;pPifP:qN0sy:goto ILWwv;B3qIL:logs('amazon_pay_v2')->error('reasonCode: ' . $checkoutSession->reasonCode . ' message: ' . $checkoutSession->message);goto OjUNo;JZHDi:$amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey);goto SK3nb;WXAl8:return $this->redirectToRoute('amazon_pay_shopping');goto oUDRT;u6as_:if (!($arrAmazonCustomerError = $this->checkAmazonCustomerError($request, $form, $Order))) {goto ipM4W;}goto fDqrf;AUHjw:return $this->redirectToRoute('shopping_error');goto G_5_I;aXdpU:$form = $this->createForm(OrderType::class, $Order);goto ig749;oT2vj:logs('amazon_pay_v2')->info('[注文手続] CheckoutSessionがOpenで無い為決済処理を中断します.', ['CheckoutSessionId => $amazonCheckoutSessionId']);goto MEEYr;lHgun:$this->entityManager->flush();goto KbWzR;qlPia:goto qN0sy;goto j7AVb;fDqrf:$this->session->set($this->sessionAmazonCustomerErrorKey, serialize($arrAmazonCustomerError));goto Up9LD;kMKL3:if (!($response = $paymentMethod->apply())) {goto r3RV2;}goto fIqrF;JpyGP:if ($this->Config->getUseConfirmPage() == $this->eccubeConfig['amazon_pay_v2']['toggle']['on']) {goto XjYk0;}goto u6as_;SK3nb:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto DAvib;sFJnY:logs('amazon_pay_v2')->info('AmazonShopping::order start.');goto CY0wN;Es1qb:dxdaI:goto SbJK7;MEEYr:$this->session->remove($this->sessionAmazonCheckoutSessionIdKey);goto AUHjw;U9J68:R5Qi4:goto s6a4x;YetA_:if (!$shippingDifference) {goto dxdaI;}goto IyXiy;lyUOO:$paymentMethod = $this->createPaymentMethod($Order, $form);goto dcYzT;WStyB:VXmYM:goto MX8_N;pvRo4:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto jtxTp;HDagf:logs('amazon_pay_v2')->info('購入処理開始', [$Order->getId()]);goto mSSPv;ILGgR:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto VXmYM;}goto ZEU4n;it0FU:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto wL0B7;Jeyr0:s_B2P:goto mATPf;dI1RO:if (!isset($checkoutSession->reasonCode)) {goto osw8f;}goto B3qIL;somfP:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto vkxB1;}goto k2NLY;eh7up:if ($this->Config->getUseConfirmPage() == $this->eccubeConfig['amazon_pay_v2']['toggle']['off']) {goto SwMYV;}goto JZHDi;gsBrz:}    /**
     * 結果受取
     *
     * @Route("/shopping/amazon_pay/checkout_result", name="amazon_pay_shopping_checkout_result")
     */
public function checkoutResult(Request $request){goto Vsg6i;ecBjE:logs('amazon_pay_v2')->info('[リダイレクト] 決済処理中の受注が存在しません.');goto LpRYk;etXjh:$this->cartService->clear();goto npo8F;BrWn3:$this->session->set($this->sessionAmazonCustomerParamKey, null);goto Z13wO;vwTqN:$this->entityManager->flush();goto IeYYK;Om3gv:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto KeRI4;rMfZa:AUD1G:goto dfDP_;KeRI4:logs('amazon_pay_v2')->info('[注文処理] 購入完了画面へ遷移します.', [$Order->getId()]);goto l1sIS;vxCX0:$amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey);goto E75wG;IeYYK:$this->session->set($this->sessionAmazonCheckoutSessionIdKey, null);goto SJCQ7;G2daR:logs('amazon_pay_v2')->info('[注文処理] カートをクリアします.', [$Order->getId()]);goto etXjh;vNqgE:logs('amazon_pay_v2')->info('[注文処理] 注文メールの送信を行います.', [$Order->getId()]);goto F8oVk;avxG5:try {goto sgNjP;TkiI7:uOcfS:goto BqOm2;Khz1L:$mail = $Order->getEmail();goto xDTeU;Hf37F:goto jQAQd;goto O8pGY;o6sa8:$Customers = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId]);goto z6ALy;axaD0:$this->entityManager->commit();goto zZ3CT;ljfNj:if (!($response = $this->executeCheckout($paymentMethod, $Order))) {goto QCI6w;}goto hYRdi;NSTlv:$mail = $Customer->getEmail();goto B1qBs;VUW4r:$url = $this->generateUrl('mypage_login', [], UrlGeneratorInterface::ABSOLUTE_URL);goto SBo_1;xUzmH:logs('amazon_pay_v2')->info('購入処理完了', [$Order->getId()]);goto NqcXh;pIAIF:$Order->setCustomer($Customer);goto NSTlv;oUpav:if (!$arrAmazonCustomerParam['customer_regist_v2']) {goto bh_xo;}goto VUW4r;O8pGY:npYri:goto Khz1L;kTarg:bh_xo:goto n9GGk;YpibS:if (empty($arrAmazonCustomerParam['login_check_v2']) || $arrAmazonCustomerParam['login_check_v2'] == 'regist') {goto Iayi2;}goto kfvCu;kjUa_:$paymentMethod = $this->createPaymentMethod($Order, $form, $amazonCheckoutSessionId);goto sNJj_;ViLra:EvGTF:goto SCzRs;EIrcS:$Customer = $this->getUser();goto pIAIF;Q5LPn:Ya30G:goto ENG7E;BqOm2:$this->entityManager->flush();goto axaD0;z6ALy:if (!(!$Customer->getV2AmazonUserId() && empty($Customers[0]))) {goto NykIh;}goto j5kjC;sNJj_:$this->entityManager->beginTransaction();goto VyxxO;Yi2HD:NykIh:goto Q5LPn;sgNjP:logs('amazon_pay_v2')->info('決済完了レスポンス受取', [$Order->getId()]);goto MTDfN;xDTeU:            $mail_message = <<<__EOS__
************************************************
　会員登録情報
************************************************
マイページURL：{$url}
※会員登録済みです。メールアドレスは{$mail}です。

__EOS__;
goto Kq3uh;ezVfa:xEkLq:goto TkiI7;zZ3CT:logs('amazon_pay_v2')->info('[注文処理] 注文処理が完了しました.', [$Order->getId()]);goto xUzmH;rXbSV:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto EvGTF;}goto YpibS;VyxxO:$this->entityManager->lock($Order, LockMode::PESSIMISTIC_WRITE);goto O8klQ;uIyz5:$this->setLogin($request, $Order);goto BKFFv;kfvCu:if (!($arrAmazonCustomerParam['login_check_v2'] == 'login')) {goto Ya30G;}goto uIyz5;n9GGk:V76xB:goto WHIjD;BKkA5:$Order->setCompleteMailMessage($mail_message);goto kTarg;SCzRs:$Customer = $this->getUser();goto deh6d;F9jbo:if (!(!$Customer->getV2AmazonUserId() && empty($Customers[0]))) {goto xEkLq;}goto IXm06;deh6d:$Customers = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId]);goto F9jbo;zJO91:Iayi2:goto oUpav;SBo_1:if ($this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]) || $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId])) {goto npYri;}goto Ihqx3;B1qBs:            $mail_message = <<<__EOS__
************************************************
　会員登録情報
************************************************
マイページURL：{$url}
ログインメールアドレス：{$mail}
初期パスワード：{$password}

__EOS__;
goto Hf37F;BKFFv:$Customer = $Order->getCustomer();goto o6sa8;ENG7E:goto V76xB;goto zJO91;j5kjC:$Customer->setV2AmazonUserId($profile->buyerId);goto Yi2HD;Ihqx3:$password = $this->amazonOrderHelper->registCustomer($Order, $arrAmazonCustomerParam['mail_magazine']);goto EIrcS;MTDfN:$form = $this->createForm(OrderType::class, $Order);goto kjUa_;hYRdi:return $response;goto En1NC;O8klQ:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::checkoutを実行します.');goto ljfNj;A3wl2:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto rXbSV;Kq3uh:jQAQd:goto BKkA5;WHIjD:goto uOcfS;goto ViLra;IXm06:$Customer->setV2AmazonUserId($profile->buyerId);goto ezVfa;En1NC:QCI6w:goto A3wl2;NqcXh:} catch (ShoppingException $e) {goto jIjBF;aKXlZ:logs('amazon_pay_v2')->error('購入エラー', [$e->getMessage()]);goto axytI;Rdpvq:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto R1as0;jIjBF:$this->addError($e->getMessage());goto aKXlZ;R1as0:$this->entityManager->flush();goto pmNPQ;axytI:$this->entityManager->getConnection()->rollback();goto Rdpvq;pmNPQ:return $this->redirectToRoute('shopping_error');goto iGM0d;iGM0d:} catch (AmazonPaymentException $e) {goto W4Qp1;ZPrzU:logs('amazon_pay_v2')->error($e->getMessage(), [$Order->getId()]);goto EYXRV;W4Qp1:$this->addError($e->getMessage());goto ZPrzU;mzn4F:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto O0M40;EYXRV:$this->entityManager->getConnection()->rollback();goto mzn4F;Ktxp0:return $this->redirectToRoute('shopping_error');goto uHawA;O0M40:$this->entityManager->flush();goto Ktxp0;uHawA:} catch (\Exception $e) {goto L2SCV;vRxKL:$this->entityManager->getConnection()->rollback();goto b6MMW;L2SCV:$this->addError('front.shopping.system_error');goto SX4fN;SX4fN:logs('amazon_pay_v2')->error('予期しないエラー', [get_class($e), $e->getMessage()]);goto vRxKL;b6MMW:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto cZ1L1;WN_G_:return $this->redirectToRoute('shopping_error');goto Zk5Sq;cZ1L1:$this->entityManager->flush();goto WN_G_;Zk5Sq:}goto wCfhK;RPn_K:logs('amazon_pay_v2')->info('[注文処理] カートをクリアします.', [$Order->getId()]);goto uPmpf;YNuS4:if ($Order) {goto Z3Dsz;}goto tlXUr;tlXUr:logs('amazon_pay_v2')->info('[リダイレクト] 受注が存在しません.');goto asGT3;yM0cN:$this->entityManager->flush();goto E2Xsg;GHSSV:ewXFR:goto Ke93h;ycSD7:$this->session->set(OrderHelper::SESSION_ORDER_ID, $Order->getId());goto G2daR;oDNTb:tZaiT:goto ecBjE;pVGcZ:$Order = $this->orderRepository->findOneBy(['pre_order_id' => $preOrderId]);goto YNuS4;FX5xU:return $this->redirectToRoute('shopping_complete');goto TDwMj;LpRYk:return $this->redirectToRoute('shopping_error');goto rMfZa;dfDP_:$amazonCheckoutSessionId = $request->get('amazonCheckoutSessionId');goto vxCX0;RcJ5e:$this->session->set(OrderHelper::SESSION_ORDER_ID, $Order->getId());goto vNqgE;SJCQ7:$this->session->set($this->sessionAmazonCustomerParamKey, null);goto Om3gv;C3Fp5:$Order->setAmazonPayV2SessionTemp(null);goto yM0cN;cPYp_:logs('amazon_pay_v2')->info('[注文処理] 注文処理が完了しました. 購入完了画面へ遷移します.', [$Order->getId()]);goto FX5xU;l1sIS:return $this->redirectToRoute('shopping_complete');goto bqY7e;bg265:$Order->appendCompleteMailMessage("特記事項：" . $this->Config->getMailNotices());goto uUQQA;JoG03:$this->entityManager->flush();goto RPn_K;gx7tE:if ($Order->getOrderStatus() != $this->orderStatusRepository->find(OrderStatus::PENDING)) {goto tZaiT;}goto K3pbf;GT7U4:Z3Dsz:goto rrC9T;F8oVk:if (is_null($this->Config->getMailNotices())) {goto VbQK4;}goto bg265;bqY7e:goto AUD1G;goto oDNTb;Ke93h:logs('amazon_pay_v2')->info('[注文処理] IPNにより注文処理完了済.', [$Order->getId()]);goto ycSD7;rrC9T:if ($Order->getOrderStatus() == $this->orderStatusRepository->find(OrderStatus::NEW)) {goto ewXFR;}goto gx7tE;Z13wO:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto cPYp_;Vsg6i:$preOrderId = $this->cartService->getPreOrderId();goto pVGcZ;wCfhK:logs('amazon_pay_v2')->info('AmazonShopping::complete_order end.');goto RcJ5e;oH3wu:$this->mailService->sendOrderMail($Order);goto JoG03;E2Xsg:$this->session->set($this->sessionAmazonCheckoutSessionIdKey, null);goto BrWn3;K3pbf:goto AUD1G;goto GHSSV;asGT3:return $this->redirectToRoute('shopping_error');goto GT7U4;E75wG:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto avxG5;uPmpf:$this->cartService->clear();goto C3Fp5;uUQQA:VbQK4:goto oH3wu;npo8F:$Order->setAmazonPayV2SessionTemp(null);goto vwTqN;TDwMj:}    /**
     * 購入確認画面から, 他の画面へのリダイレクト.
     * 配送業者や支払方法、お問い合わせ情報をDBに保持してから遷移する.
     *
     * @Route("/shopping/amazon_pay/redirect_to", name="amazon_pay_shopping_redirect_to", methods={"POST"})
     * @Template("Shopping/index.twig")
     */
public function redirectTo(Request $request, RouterInterface $router){goto pIOOu;ss3dm:if (!$flowResult->hasError()) {goto S6dBF;}goto S2sqB;ESpst:Sa6SI:goto FggN4;pcUWT:return $this->redirectToRoute('amazon_pay_shopping');goto fND3a;Efvq_:return $this->redirectToRoute('shopping_error');goto ESpst;jjCG8:$redirectTo = $form['redirect_to']->getData();goto SAr4h;pIOOu:$preOrderId = $this->cartService->getPreOrderId();goto xNoYA;dOEEz:logs('amazon_pay_v2')->info('[リダイレクト] リダイレクト先未指定のため注文手続き画面へ遷移します.');goto VaZ9B;S2sqB:logs('amazon_pay_v2')->info('Errorが発生したため購入エラー画面へ遷移します.', [$flowResult->getErrors()]);goto MZXgh;fND3a:b0xpj:goto jjCG8;ittRP:$form->handleRequest($request);goto xxxCU;JnTIz:if ($Order) {goto Sa6SI;}goto v9McL;MZXgh:return $this->redirectToRoute('shopping_error');goto mAmcl;FggN4:$form = $this->createForm(OrderType::class, $Order);goto ittRP;xNoYA:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto JnTIz;zv5LO:WOvoK:goto Y4ALG;sHJYd:logs('amazon_pay_v2')->info('[リダイレクト] 集計処理を開始します.', [$Order->getId()]);goto wa8kq;wa8kq:$flowResult = $this->executePurchaseFlow($Order, false);goto MBtpu;VaZ9B:return $this->redirectToRoute('amazon_pay_shopping');goto zv5LO;m3HaR:KTuQC:goto z7ZBm;TR1My:logs('amazon_pay_v2')->info('Warningが発生したため注文手続き画面へ遷移します.', [$flowResult->getWarning()]);goto pcUWT;Y4ALG:try {goto i2YeN;VRvlo:$result = $router->match($redirectTo);goto mno_E;LXxMh:$redirectTo = preg_replace($pattern, '', $redirectTo);goto VRvlo;i2YeN:$pattern = '/^' . preg_quote($request->getBasePath(), '/') . '/';goto LXxMh;mno_E:return $this->forwardToRoute($result['_route']);goto qoXG2;qoXG2:} catch (\Exception $e) {logs('amazon_pay_v2')->info('[リダイレクト] URLの形式が不正です', [$redirectTo, $e->getMessage()]);return $this->redirectToRoute('shopping_error');}goto m3HaR;z7ZBm:logs('amazon_pay_v2')->info('[リダイレクト] フォームエラーのため, 注文手続き画面を表示します.', [$Order->getId()]);goto Bp2go;xxxCU:if (!($form->isSubmitted() && $form->isValid())) {goto KTuQC;}goto sHJYd;MBtpu:$this->entityManager->flush();goto ss3dm;x4lAt:if (!$flowResult->hasWarning()) {goto b0xpj;}goto TR1My;SAr4h:if (!empty($redirectTo)) {goto WOvoK;}goto dOEEz;v9McL:logs('amazon_pay_v2')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto Efvq_;mAmcl:S6dBF:goto x4lAt;Bp2go:return $this->redirectToRoute('amazon_pay_shopping', ['request' => $request], 307);goto GDz3D;GDz3D:}    /**
     * API通信によって配送業者や支払方法、お問い合わせ情報をDBに保存する.
     *
     * @Route("/shopping/amazon_pay/order_save", name="amazon_pay_shopping_order_save", methods={"POST", "GET"})
     */
public function orderSave(Request $request){goto aAqqT;aAqqT:if ($request->isXmlHttpRequest()) {goto EqCGK;}goto GZsa5;fZY2N:$this->entityManager->flush();goto J3ryj;wrnx4:return $this->json(['error' => 'validateError'], 500);goto XUeze;yVXcj:return $this->json(['error' => 'executePurchaseFlow::Warning'], 500);goto H102b;y7n2C:cYI7D:goto dnR5F;Kb9J9:return $this->json([]);goto EsOGG;UFhnT:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto M_aXJ;jz_8a:logs('amazon_pay_v2')->info('購入処理中の受注が存在しません.');goto PJqw5;xtORJ:$flowResult = $this->executePurchaseFlow($Order, false);goto fZY2N;EsOGG:V4_pF:goto yBnTk;NCPUe:logs('amazon_pay_v2')->info('executePurchaseFlowでErrorが発生しました.', [$flowResult->getErrors()]);goto wt1BD;sNKKD:logs('amazon_pay_v2')->info('集計処理を開始します.', [$Order->getId()]);goto xtORJ;deb4K:$form = $this->createForm(OrderType::class, $Order);goto l9Oq2;yBnTk:logs('amazon_pay_v2')->info('フォームエラーが発生しました.');goto wrnx4;DS9vk:EqCGK:goto b27YE;dnR5F:if (!$flowResult->hasWarning()) {goto ZrD5K;}goto eN0uw;M_aXJ:if ($Order) {goto diZvy;}goto jz_8a;GZsa5:throw new BadRequestHttpException();goto DS9vk;b27YE:$preOrderId = $this->cartService->getPreOrderId();goto UFhnT;kEDrv:diZvy:goto deb4K;eN0uw:logs('amazon_pay_v2')->info('executePurchaseFlowでWarningが発生しました.', [$flowResult->getWarning()]);goto yVXcj;J3ryj:if (!$flowResult->hasError()) {goto cYI7D;}goto NCPUe;l9Oq2:$form->handleRequest($request);goto JILcf;PJqw5:return $this->json(['error' => 'OrderNotFound'], 500);goto kEDrv;JILcf:if (!($form->isSubmitted() && $form->isValid())) {goto V4_pF;}goto sNKKD;H102b:ZrD5K:goto Kb9J9;wt1BD:return $this->json(['error' => 'executePurchaseFlow::Error'], 500);goto y7n2C;XUeze:}private function createPaymentMethod(Order $Order, FormInterface $form, $amazonCheckoutSessionId = null){goto QlNh_;OaKiV:if (is_null($amazonCheckoutSessionId)) {goto h_xsn;}goto esKss;XivmQ:$PaymentMethod->setOrder($Order);goto pf6gC;aSlid:h_xsn:goto Kwxkm;QlNh_:$PaymentMethod = $this->container->get($Order->getPayment()->getMethodClass());goto XivmQ;pf6gC:$PaymentMethod->setFormType($form);goto OaKiV;Kwxkm:return $PaymentMethod;goto iyodb;esKss:$PaymentMethod->setAmazonCheckoutSessionId($amazonCheckoutSessionId);goto aSlid;iyodb:}protected function executeCheckout(AmazonPay $paymentMethod, Order $Order){goto df2Mz;ckGNG:return $this->redirectToRoute('shopping_error');goto wnrmg;cEgE4:if ($PaymentResult->isSuccess()) {goto LEG6V;}goto FLL7c;JFtFS:$response = $PaymentResult->getResponse();goto ICGIg;ICGIg:if (!($response && ($response->isRedirection() || $response->getContent()))) {goto mGAQg;}goto F1az3;FLL7c:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto MvROc;wnrmg:LEG6V:goto S7cGc;y0bCt:return $response;goto Jjifm;MvROc:foreach ($PaymentResult->getErrors() as $error) {$this->addError($error);yiehv:}goto KqnCf;Li58q:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::checkoutのエラーのため, 購入エラー画面へ遷移します.', [$PaymentResult->getErrors()]);goto ckGNG;KqnCf:mMPfr:goto Li58q;pyFgg:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::checkoutが指定したレスポンスを表示します.');goto y0bCt;F1az3:$this->entityManager->flush();goto pyFgg;Jjifm:mGAQg:goto cEgE4;df2Mz:$PaymentResult = $paymentMethod->checkout();goto JFtFS;S7cGc:}private function getAmazonCustomerParam($request){goto fdO5Y;FudJd:$amazon_login_email_v2 = empty($request->get('_shopping_order')['amazon_login_email_v2']) ? null : $request->get('_shopping_order')['amazon_login_email_v2'];goto FTUE4;FTUE4:$amazon_login_password_v2 = empty($request->get('_shopping_order')['amazon_login_password_v2']) ? null : $request->get('_shopping_order')['amazon_login_password_v2'];goto OYMSB;fdO5Y:$customer_regist_v2 = empty($request->get('_shopping_order')['customer_regist_v2']) ? false : true;goto vIRXv;OYMSB:return ['customer_regist_v2' => $customer_regist_v2, 'mail_magazine' => $mail_magazine, 'login_check_v2' => $login_check_v2, 'amazon_login_email_v2' => $amazon_login_email_v2, 'amazon_login_password_v2' => $amazon_login_password_v2];goto ks3oo;nvidf:$login_check_v2 = empty($request->get('_shopping_order')['login_check_v2']) ? null : $request->get('_shopping_order')['login_check_v2'];goto FudJd;vIRXv:$mail_magazine = empty($request->get('_shopping_order')['mail_magazine']) ? false : true;goto nvidf;ks3oo:}private function checkAmazonCustomerError($request, $form, $Order){goto yO7K8;snnqc:return $arrError;goto lxen4;eObc3:if (!($login_check_v2 == 'login')) {goto Flrac;}goto mEEm8;ba6bc:uIy8g:goto TfNv3;ezYSA:Tg8G_:goto ba6bc;mEEm8:$violations = $this->validator->validate($form['amazon_login_email_v2']->getData(), [new Assert\NotBlank(), new Assert\Email()]);goto ePsjp;pgPdx:if (empty($amazon_login_email_v2_error)) {goto Y8jMa;}goto a0EPp;j721e:if (!('POST' === $request->getMethod() && strpos($request_uri, 'shopping/amazon_pay/address') === false && strpos($request_uri, 'shopping/amazon_pay/delivery') === false)) {goto YmEXG;}goto JKVUa;Xkg_N:$AmazonCustomer = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId]);goto bTYP4;Kh6kO:if (empty($AmazonCustomer[0])) {goto rhlv4;}goto uTFIW;a0EPp:$arrError['amazon_login_email_v2'] = '※ メールアドレスが' . $amazon_login_email_v2_error;goto T1VGg;K_n5o:YmEXG:goto T1fVX;otmdN:$customerPassword = $Customer[0]->getPassword();goto F7Np8;oFCLw:if ($login_check_v2 == 'regist') {goto D8gz9;}goto eObc3;T1fVX:qY2VU:goto snnqc;FDCsR:goto Tg8G_;goto OhsP3;k6iF7:$arrError['amazon_login_email_v2'] = '※ メールアドレスまたはパスワードが正しくありません。';goto ezYSA;Sv0AU:rhlv4:goto ACdZt;W95wV:if (empty($amazon_login_password_v2_error)) {goto J_ZAY;}goto ifqfJ;w98Sm:$arrError['customer_regist_v2'] = '※ 会員登録済みです。メールアドレスは' . $Order->getEmail() . 'です。';goto kbRVJ;JKVUa:$login_check_v2 = $form['login_check_v2']->getData();goto oFCLw;tzdXW:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]);goto L2Xtl;Ingh9:$salt = $Customer[0]->getSalt();goto otmdN;PpsuU:J_ZAY:goto KTbtr;HHUY_:D8gz9:goto oXfFJ;KHerO:goto F7tU5;goto HHUY_;tjteH:$violations = $this->validator->validate($form['amazon_login_password_v2']->getData(), [new Assert\NotBlank()]);goto mhT44;QUxTz:WKt45:goto b0tXT;IZwdn:if (!(!$this->isGranted('IS_AUTHENTICATED_FULLY') && $this->Config->getLoginRequired() == $this->eccubeConfig['amazon_pay_v2']['toggle']['on'])) {goto qY2VU;}goto tGu1N;RLFBq:foreach ($violations as $violation) {$amazon_login_email_v2_error .= $violation->getMessage() . PHP_EOL;YvA_X:}goto bP2aD;ACdZt:goto Qvy0z;goto bGlon;uTFIW:$arrError['customer_regist_v2'] = '※ このAmazonアカウントで既に会員登録済みです。メールアドレスは' . $AmazonCustomer[0]->getEmail() . 'です。';goto Sv0AU;ifqfJ:$arrError['amazon_login_password_v2'] = '※ パスワードが' . $amazon_login_password_v2_error;goto PpsuU;yO7K8:$arrError = [];goto IZwdn;WlDQw:foreach ($violations as $violation) {$amazon_login_password_v2_error .= $violation->getMessage() . PHP_EOL;ROXB6:}goto Xbw3n;kbRVJ:Qvy0z:goto TLvtF;TLvtF:goto WKt45;goto JJZRA;L2Xtl:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto Xkg_N;mhT44:$amazon_login_password_v2_error = '';goto WlDQw;OhsP3:jnxay:goto k6iF7;bGlon:k6vgO:goto w98Sm;ePsjp:$amazon_login_email_v2_error = '';goto RLFBq;F7Np8:if ($encoder->isPasswordValid($customerPassword, $form['amazon_login_password_v2']->getData(), $salt)) {goto hZPNu;}goto YudPP;bP2aD:eY9oL:goto pgPdx;KTbtr:if (!(empty($login_check_v2_error) && empty($amazon_login_email_v2_error) && empty($amazon_login_password_v2_error))) {goto uIy8g;}goto qkMHI;T1VGg:Y8jMa:goto tjteH;TfNv3:Flrac:goto KHerO;qkMHI:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $form['amazon_login_email_v2']->getData()]);goto afG5I;b0tXT:F7tU5:goto K_n5o;afG5I:if (empty($Customer[0])) {goto jnxay;}goto gP_ZU;bTYP4:if (!empty($Customer[0])) {goto k6vgO;}goto Kh6kO;oXfFJ:if (empty($form['customer_regist_v2']->getData())) {goto GKCf0;}goto tzdXW;JJZRA:GKCf0:goto Y4wC_;tGu1N:$request_uri = $request->getUri();goto j721e;L27YC:hZPNu:goto FDCsR;gP_ZU:$encoder = $this->encoderFactory->getEncoder($Customer[0]);goto Ingh9;Xbw3n:GahU7:goto W95wV;YudPP:$arrError['amazon_login_email_v2'] = '※ メールアドレスまたはパスワードが正しくありません。';goto L27YC;Y4wC_:$arrError['customer_regist_v2'] = '※ 会員登録が選択されていません。';goto QUxTz;lxen4:}private function setLogin($request, $Order){goto K1x52;ltdcS:$token = new UsernamePasswordToken($Customer[0], null, 'customer', ['ROLE_USER']);goto jefIU;K1x52:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]);goto NuT1s;jefIU:$this->tokenStorage->setToken($token);goto ZwPHn;ZwPHn:$this->amazonOrderHelper->copyToOrderFromCustomer($Order, $Customer[0]);goto D3AqW;NuT1s:$Order->setCustomer($Customer[0]);goto ltdcS;D3AqW:}private function setAmazonCustomerData($form, $arrAmazonCustomerParam){goto r9Vl5;OyKHD:Njezc:goto H7uAw;GV4PW:$form->get('login_check_v2')->setData($arrAmazonCustomerParam['login_check_v2']);goto UwCVG;UwCVG:$form->get('amazon_login_email_v2')->setData($arrAmazonCustomerParam['amazon_login_email_v2']);goto VvZKl;H7uAw:if (!($this->Config->getLoginRequired() == $this->eccubeConfig['amazon_pay_v2']['toggle']['on'] && !$this->isGranted('IS_AUTHENTICATED_FULLY'))) {goto k_XxJ;}goto GV4PW;BZrAy:k_XxJ:goto CmT_1;wl1X8:$form->get('mail_magazine')->setData($arrAmazonCustomerParam['mail_magazine']);goto OyKHD;VvZKl:$form->get('amazon_login_password_v2')->setData($arrAmazonCustomerParam['amazon_login_password_v2']);goto BZrAy;kV7aH:if (!($this->pluginRepository->findOneBy(['code' => 'MailMagazine4', 'enabled' => true]) || $this->pluginRepository->findOneBy(['code' => 'PostCarrier4', 'enabled' => true]))) {goto Njezc;}goto wl1X8;r9Vl5:$form->get('customer_regist_v2')->setData($arrAmazonCustomerParam['customer_regist_v2']);goto kV7aH;CmT_1:}public function getPendingProcessingOrder($preOrderId = null){goto wm3Ne;YRqTR:return $this->orderRepository->findOneBy(['pre_order_id' => $preOrderId, 'OrderStatus' => $OrderStatus]);goto bcG2E;wm3Ne:if (!(null === $preOrderId)) {goto lYrve;}goto W6ptc;W6ptc:return null;goto nzsiW;mCHlc:$OrderStatus = $this->orderStatusRepository->find(OrderStatus::PENDING);goto YRqTR;nzsiW:lYrve:goto mCHlc;bcG2E:}private function checkShippingDifference($Order, $shippingAddress){goto uU58O;x5gau:$Shippings = $Order->getShippings();goto ej1k3;lRMWL:$shippingDifference = true;goto H0AxA;X8HH7:return $shippingDifference;goto hkMt6;AJ6ZU:$this->amazonOrderHelper->convert($amazonShipping, $shippingAddress);goto x5gau;uU58O:$amazonShipping = new Shipping();goto p_Yfs;ej1k3:$shippingDifference = false;goto e9am1;H0AxA:SWaEw:goto X8HH7;p_Yfs:$amazonShipping->setOrder($Order);goto AJ6ZU;e9am1:if (!($Shippings->first()->getPostalCode() !== $amazonShipping->getPostalCode() || $Shippings->first()->getName01() !== $amazonShipping->getName01() || $Shippings->first()->getName02() !== $amazonShipping->getName02() || $Shippings->first()->getKana01() !== $amazonShipping->getKana01() || $Shippings->first()->getKana02() !== $amazonShipping->getKana02() || $Shippings->first()->getPref() !== $amazonShipping->getPref() || $Shippings->first()->getAddr01() !== $amazonShipping->getAddr01() || $Shippings->first()->getAddr02() !== $amazonShipping->getAddr02())) {goto SWaEw;}goto lRMWL;hkMt6:}protected function getAmazonPayDefaultDelivery(Shipping $Shipping){goto VEM_U;cogDI:return $Delivery;goto k7Thh;gSHty:vbe8g:goto WYiCF;RxMGI:dp4I0:goto LYtMg;VEM_U:$OrderItems = $Shipping->getProductOrderItems();goto xi32D;LYtMg:$Delivery = current($Deliveries);goto cogDI;xi32D:$SaleTypes = [];goto CjKu1;CjKu1:foreach ($OrderItems as $OrderItem) {goto q8hgG;uIAVO:$SaleType = $ProductClass->getSaleType();goto YHzMr;q8hgG:$ProductClass = $OrderItem->getProductClass();goto uIAVO;Xf3Ai:ci8mB:goto DxRd8;YHzMr:$SaleTypes[$SaleType->getId()] = $SaleType;goto Xf3Ai;DxRd8:}goto gSHty;jjCrC:foreach ($Deliveries as $key => $Delivery) {goto ZMw3o;uY93U:ORJQJ:goto HBdaO;jIjVY:unset($Deliveries[$key]);goto i71fM;h7W7v:$amazonPayFlg = false;goto Dtsdr;vUw50:Bmrmu:goto uJSjn;uJSjn:if ($amazonPayFlg) {goto EkQn1;}goto jIjVY;Dtsdr:foreach ($PaymentOptions as $PaymentOption) {goto MAZxJ;gB0eq:DWxXQ:goto YE4d_;Sg2eb:k2iS1:goto gB0eq;Oz4S_:goto Bmrmu;goto Sg2eb;OPz8O:$amazonPayFlg = true;goto Oz4S_;cyj0A:if (!($Payment->getMethodClass() === AmazonPay::class)) {goto k2iS1;}goto OPz8O;MAZxJ:$Payment = $PaymentOption->getPayment();goto cyj0A;YE4d_:}goto vUw50;ZMw3o:$PaymentOptions = $Delivery->getPaymentOptions();goto h7W7v;i71fM:EkQn1:goto uY93U;HBdaO:}goto RxMGI;WYiCF:$Deliveries = $this->deliveryRepository->getDeliveries($SaleTypes);goto jjCrC;k7Thh:}}