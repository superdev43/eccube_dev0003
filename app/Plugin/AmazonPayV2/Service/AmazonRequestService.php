<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2021-07-20 10:45:27              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2\Service;use Doctrine\ORM\EntityManagerInterface;use Eccube\Common\EccubeConfig;use Eccube\Repository\BaseInfoRepository;use Eccube\Repository\CustomerRepository;use Eccube\Service\CartService;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\PurchaseFlow;use Plugin\AmazonPayV2\Exception\AmazonException;use Plugin\AmazonPayV2\Exception\AmazonPaymentException;use Plugin\AmazonPayV2\Repository\ConfigRepository;use Plugin\AmazonPayV2\Amazon\Pay\API\Client as AmazonPayClient;use GuzzleHttp\Client;use Guzzle\Http\Exception\BadResponseException;use Guzzle\Http\Exception\CurlException;use Symfony\Bundle\FrameworkBundle\Controller\ControllerTrait;use Symfony\Component\DependencyInjection\ContainerInterface;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Session\SessionInterface;use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Symfony\Component\Routing\Generator\UrlGeneratorInterface;use Carbon\Carbon;class AmazonRequestService{use ControllerTrait;protected $entityManager;protected $baseInfoRepository;protected $customerRepository;protected $cartService;protected $purchaseFlow;protected $eccubeConfig;protected $configRepository;protected $Config;protected $amazonApi;protected $amazonApiConfig;protected $session;protected $tokenStorage;protected $container;public function __construct(EntityManagerInterface $entityManager, BaseInfoRepository $baseInfoRepository, CustomerRepository $customerRepository, CartService $cartService, PurchaseFlow $cartPurchaseFlow, EccubeConfig $eccubeConfig, ConfigRepository $configRepository, SessionInterface $session, TokenStorageInterface $tokenStorage, ContainerInterface $container){goto Pseqz;Qx2rc:$this->tokenStorage = $tokenStorage;goto vjoc4;v1G0C:vxsrB:goto w9j30;LrUrY:$this->amazonApiConfig = $this->eccubeConfig['amazon_pay_v2']['api']['config'];goto XFzbZ;cMQdD:$this->configRepository = $configRepository;goto NkToZ;MDE3e:$this->cartService = $cartService;goto A0ywy;sFT82:goto bytUp;goto v1G0C;CaE42:$this->Config = $this->configRepository->get();goto uWKzm;I7HSA:$this->customerRepository = $customerRepository;goto MDE3e;w9j30:$this->amazonApi = $this->eccubeConfig['amazon_pay_v2']['api']['prod'];goto kiPME;kiPME:bytUp:goto LrUrY;vjoc4:$this->container = $container;goto CaE42;r2e8g:$this->eccubeConfig = $eccubeConfig;goto cMQdD;NkToZ:$this->session = $session;goto Qx2rc;j70xW:$this->amazonApi = $this->eccubeConfig['amazon_pay_v2']['api']['sandbox'];goto sFT82;Pseqz:$this->entityManager = $entityManager;goto evn4n;evn4n:$this->BaseInfo = $baseInfoRepository->get();goto I7HSA;uWKzm:if ($this->Config->getAmazonAccountMode() == $this->eccubeConfig['amazon_pay_v2']['account_mode']['owned'] && $this->Config->getEnv() == $this->eccubeConfig['amazon_pay_v2']['env']['prod']) {goto vxsrB;}goto j70xW;A0ywy:$this->purchaseFlow = $cartPurchaseFlow;goto r2e8g;XFzbZ:}private function payoutSellerOrderId($orderId, $request_type = ''){goto BYB52;ltimX:$timestamp = '';goto CwvMb;EfJuM:$prefix = '';goto xKC3q;KSo4c:$arrInit = parse_ini_file($iniFile);goto QcNDU;w6mZX:$timestamp = Carbon::now()->timestamp;goto TnSkQ;TnSkQ:UBCoq:goto pg3Zv;QcNDU:$prefix = $arrInit['prefix'];goto HE50X;CwvMb:if (!($this->Config->getAmazonAccountMode() === $this->eccubeConfig['amazon_pay_v2']['account_mode']['shared'])) {goto UBCoq;}goto w6mZX;U2CjY:if (!file_exists($iniFile)) {goto mGDCc;}goto KSo4c;xKC3q:$iniFile = dirname(__FILE__) . '/../amazon_pay_config.ini';goto U2CjY;bb54n:$prefix = $prefix === '' ? '' : $prefix . '_';goto ltimX;pg3Zv:$timestamp = $timestamp === '' ? '' : $timestamp . '_';goto yAYXx;HE50X:mGDCc:goto bb54n;BYB52:$request_attr = $request_type === '' ? '' : strtoupper($request_type) . '_';goto EfJuM;yAYXx:return $timestamp . $prefix . $request_attr . $orderId;goto Y92NA;Y92NA:}protected function getAmazonPayConfig(){goto uTHLn;znzi1:return $config;goto O7dAQ;uTHLn:$Config = $this->configRepository->get();goto eZUcf;eZUcf:$config = ['public_key_id' => $Config->getPublicKeyId(), 'private_key' => $this->container->getParameter('kernel.project_dir') . '/' . $Config->getPrivateKeyPath(), 'sandbox' => $Config->getEnv() == $this->eccubeConfig['amazon_pay_v2']['env']['sandbox'] ? true : false, 'region' => 'jp'];goto znzi1;O7dAQ:}public function createCheckoutSessionPayload($cart_key){goto wmkcd;wgBi_:return json_encode($payload, JSON_FORCE_OBJECT);goto OfZBF;wmkcd:$Config = $this->configRepository->get();goto jFKbJ;jFKbJ:$payload = ['webCheckoutDetails' => ['checkoutReviewReturnUrl' => $this->generateUrl('amazon_checkout_review', ['cart' => $cart_key], UrlGeneratorInterface::ABSOLUTE_URL)], 'paymentDetails' => ['allowOvercharge' => true], 'storeId' => $Config->getClientId(), 'deliverySpecifications' => ['addressRestrictions' => ['type' => 'Allowed', 'restrictions' => ['JP' => []]]]];goto wgBi_;OfZBF:}public function createUpdateCheckoutSessionPayload($Order){goto N2zEN;fsrjt:$paymentIntent = 'Authorize';goto sCFys;IAeCs:if ($config->getSale() == $this->eccubeConfig['amazon_pay_v2']['sale']['authori']) {goto YZ1vG;}goto cMXFw;N2zEN:if (!($Order->getPaymentTotal() == 0)) {goto DcwiF;}goto GkGEF;jf3xj:feglN:goto GF6Hi;GkGEF:throw AmazonPaymentException::create(AmazonPaymentException::ZERO_PAYMENT);goto PNhn6;GF6Hi:$payload = ['webCheckoutDetails' => ['checkoutResultReturnUrl' => $this->generateUrl('amazon_pay_shopping_checkout_result', [], UrlGeneratorInterface::ABSOLUTE_URL)], 'paymentDetails' => ['paymentIntent' => $paymentIntent, 'canHandlePendingAuthorization' => false, 'chargeAmount' => ['amount' => (int) $Order->getPaymentTotal(), 'currencyCode' => "JPY"]], 'merchantMetadata' => ['merchantReferenceId' => $this->payoutSellerOrderId($Order->getId()), 'merchantStoreName' => $this->BaseInfo->getShopName(), 'noteToBuyer' => ''], "platformId" => "A1LODGGQOBGE66"];goto XcXPq;XzKQm:$config = $this->configRepository->get();goto IAeCs;cMXFw:if ($config->getSale() == $this->eccubeConfig['amazon_pay_v2']['sale']['capture']) {goto GgzTu;}goto BwgcC;uVyU8:GgzTu:goto VcKJU;XcXPq:return json_encode($payload, JSON_FORCE_OBJECT);goto RfszS;BwgcC:goto feglN;goto tuD_B;VcKJU:$paymentIntent = 'AuthorizeWithCapture';goto jf3xj;PNhn6:DcwiF:goto XzKQm;sCFys:goto feglN;goto uVyU8;tuD_B:YZ1vG:goto fsrjt;RfszS:}public function createCompleteCheckoutSessionPayload($Order){$payload = ['chargeAmount' => ['amount' => (int) $Order->getPaymentTotal(), 'currencyCode' => 'JPY']];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCaptureChargePayload($Order, $billingAmount = null){$payload = ['captureAmount' => ['amount' => is_null($billingAmount) ? (int) $Order->getPaymentTotal() : $billingAmount, 'currencyCode' => 'JPY']];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCancelChargePayload($cancellationReason = null){$payload = ['cancellationReason' => $cancellationReason];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCloseChargePermissionPayload($closureReason = null, $cancelPendingCharges = null){$payload = ['closureReason' => $closureReason, 'cancelPendingCharges' => $cancelPendingCharges];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCreateRefundPayload($chargeId, $refundAmount){$payload = ['chargeId' => $chargeId, 'refundAmount' => ['amount' => $refundAmount, 'currencyCode' => $this->eccubeConfig['amazon_pay_v2']['api']['payload']['currency_code']]];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCreateChargePayload($chargePermissionId, $paymentTotal, $CaptureNow = false, $canHandlePendingAuthorization = false){$payload = ['chargePermissionId' => $chargePermissionId, 'chargeAmount' => ['amount' => $paymentTotal, 'currencyCode' => $this->eccubeConfig['amazon_pay_v2']['api']['payload']['currency_code']], 'captureNow' => $CaptureNow, 'canHandlePendingAuthorization' => $canHandlePendingAuthorization];return json_encode($payload, JSON_FORCE_OBJECT);}public function updateCheckoutSession($Order, $amazonCheckoutSessionId){goto qRVe4;qRVe4:$client = new AmazonPayClient($this->getAmazonPayConfig());goto RSg1P;RSg1P:$result = $client->updateCheckoutSession($amazonCheckoutSessionId, $this->createUpdateCheckoutSessionPayload($Order));goto nyTiS;nyTiS:return json_decode($result['response']);goto UYzjQ;UYzjQ:}public function signaturePayload($payload){goto RjVoy;mjJej:return $signature;goto VJb6H;ajVLX:$signature = $client->generateButtonSignature($payload);goto mjJej;RjVoy:$client = new AmazonPayClient($this->getAmazonPayConfig());goto ajVLX;VJb6H:}public function getCheckoutSession($amazonCheckoutSessionId){goto EWsuU;AHE2M:return json_decode($result['response']);goto MbwQR;RURPD:$result = $client->getCheckoutSession($amazonCheckoutSessionId);goto AHE2M;EWsuU:$client = new AmazonPayClient($this->getAmazonPayConfig());goto RURPD;MbwQR:}public function completeCheckoutSession($Order, $amazonCheckoutSessionId){goto YpZkR;Odsqc:ropnK:goto bTdwi;FbpMO:Fmtkg:goto DuSCK;xthOI:q7SRA:goto rrb7d;bTdwi:giTfd:goto AoNpo;oXwZC:$response = json_decode($result['response']);goto sCMy7;QpRW9:return $response;goto FGwtD;F909j:throw AmazonPaymentException::create($errorCode);goto Odsqc;FGwtD:tTwiO:goto wATsR;JnAlI:if (!$errorCode) {goto ropnK;}goto F909j;rrb7d:throw new AmazonException();goto d8cNH;C0kog:if (!($checkoutSession && isset($checkoutSession->statusDetails->reasonCode))) {goto giTfd;}goto ISYrG;ISYrG:$errorCode = AmazonPaymentException::getErrorCode($checkoutSession->statusDetails->reasonCode);goto JnAlI;VXIC3:uAn_O:goto KSRJ_;DuSCK:if (!($response->statusDetails->state == 'Completed')) {goto tTwiO;}goto QpRW9;AoNpo:jT3g1:goto xthOI;f9LiQ:if (isset($response->reasonCode)) {goto uAn_O;}goto Yfcml;wATsR:goto q7SRA;goto VXIC3;Yfcml:goto q7SRA;goto FbpMO;nTOy4:$checkoutSession = $this->getCheckoutSession($amazonCheckoutSessionId);goto C0kog;KSRJ_:if (!($response->reasonCode == 'CheckoutSessionCanceled')) {goto jT3g1;}goto nTOy4;YpZkR:$client = new AmazonPayClient($this->getAmazonPayConfig());goto OTdjn;OTdjn:$result = $client->completeCheckoutSession($amazonCheckoutSessionId, $this->createCompleteCheckoutSessionPayload($Order));goto oXwZC;sCMy7:if ($result['status'] == 200 || $result['status'] == 201) {goto Fmtkg;}goto f9LiQ;d8cNH:}public function captureCharge($chargeId, $Order, $billingAmount = null){goto q9PiA;RPX_W:return json_decode($result['response']);goto KkW6w;WQ4Eh:$headers = ['x-amz-pay-Idempotency-Key' => uniqid()];goto ir9Vi;ir9Vi:$result = $client->captureCharge($chargeId, $this->createCaptureChargePayload($Order, $billingAmount), $headers);goto RPX_W;q9PiA:$client = new AmazonPayClient($this->getAmazonPayConfig());goto WQ4Eh;KkW6w:}public function cancelCharge($chargeId, $cancellationReason = null){goto YB2rh;YB2rh:$payload = $this->createCancelChargePayload($cancellationReason);goto D445s;D445s:$client = new AmazonPayClient($this->getAmazonPayConfig());goto eC3FK;qgaE4:return json_decode($result['response']);goto GjEHL;eC3FK:$result = $client->cancelCharge($chargeId, $payload);goto qgaE4;GjEHL:}public function closeChargePermission($chargePermissionId, $closureReason = null, $cancelPendingCharges = true){goto AdHlz;AdHlz:$payload = $this->createCloseChargePermissionPayload($closureReason, $cancelPendingCharges);goto j1Eol;bzajQ:$result = $client->closeChargePermission($chargePermissionId, $payload);goto wqwO8;wqwO8:return json_decode($result['response']);goto SZOBv;j1Eol:$client = new AmazonPayClient($this->getAmazonPayConfig());goto bzajQ;SZOBv:}public function createRefund($chargeId, $refundAmount, $softDescriptor = null, $idempotencyKey = null){goto Kh81g;tWhaB:if (!($idempotencyKey == null)) {goto ZRzr4;}goto QIslr;Kh81g:$payload = $this->createCreateRefundPayload($chargeId, $refundAmount);goto mO4ud;aTAy2:$payload = array_merge($payload, ["softDescriptor" => $softDescriptor]);goto DKO__;lOy1s:$result = $client->createRefund($payload, $headers);goto An0Oo;An0Oo:return json_decode($result['response']);goto FuQKd;GIsz3:ZRzr4:goto BQAna;mO4ud:if (!(null != $softDescriptor)) {goto C1oDY;}goto aTAy2;DKO__:C1oDY:goto tWhaB;rwcBa:$client = new AmazonPayClient($this->getAmazonPayConfig());goto lOy1s;BQAna:$headers = ['x-amz-pay-Idempotency-Key' => $idempotencyKey];goto rwcBa;QIslr:$idempotencyKey = uniqid();goto GIsz3;FuQKd:}public function createCharge($chargePermissionId, $paymentTotal, $CaptureNow = false, $softDescriptor = null, $canHandlePendingAuthorization = false, $merchantMetadataMerchantReferenceId = null, $idempotencyKey = null){goto JAm2L;IZd92:$payload = array_merge($payload, ["softDescriptor" => $softDescriptor]);goto A__Fs;JAm2L:$payload = $this->createCreateChargePayload($chargePermissionId, $paymentTotal, $CaptureNow, $canHandlePendingAuthorization);goto KP1Bx;MrXOC:if (!($idempotencyKey == null)) {goto zaSzy;}goto o1Rfx;KP1Bx:if (!(null != $merchantMetadataMerchantReferenceId)) {goto HVoUZ;}goto msP6z;oGUHF:HVoUZ:goto oOceR;VcGZN:$headers = ['x-amz-pay-Idempotency-Key' => $idempotencyKey];goto tFa19;msP6z:$payload = array_merge($payload, ["merchantMetadata" => ["merchantReferenceId" => $merchantMetadataMerchantReferenceId]]);goto oGUHF;FJfim:zaSzy:goto VcGZN;exkdf:$result = $client->createCharge($payload, $headers);goto zaF6O;o1Rfx:$idempotencyKey = uniqid();goto FJfim;A__Fs:xyJgi:goto MrXOC;tFa19:$client = new AmazonPayClient($this->getAmazonPayConfig());goto exkdf;zaF6O:return json_decode($result['response']);goto Br6_Q;oOceR:if (!(null != $softDescriptor)) {goto xyJgi;}goto IZd92;Br6_Q:}public function getCharge($chargeId){goto KuCi_;VT_p4:return json_decode($result['response']);goto Uov6a;TssWG:$result = $client->getCharge($chargeId);goto VT_p4;KuCi_:$client = new AmazonPayClient($this->getAmazonPayConfig());goto TssWG;Uov6a:}public function createSigninPayload($returnUrl){goto qs5Fx;WNPqf:return json_encode($payload, JSON_FORCE_OBJECT);goto q_K70;qs5Fx:$Config = $this->configRepository->get();goto Div9a;Div9a:$payload = ['signInReturnUrl' => $returnUrl, 'storeId' => $Config->getClientId()];goto WNPqf;q_K70:}public function getBuyer($buyerToken, $headers = null){goto cMuj5;gwlyn:return json_decode($result['response']);goto y4mFw;P82qP:$result = $client->getBuyer($buyerToken, $headers);goto M8ZNq;vAkZ1:aTD0i:goto gwlyn;M8ZNq:if (!($result['status'] != 200)) {goto aTD0i;}goto ZuoaA;ZuoaA:throw new AmazonException();goto vAkZ1;cMuj5:$client = new AmazonPayClient($this->getAmazonPayConfig());goto P82qP;y4mFw:}public function loginWithBuyerId(Request $request, $buyerId){goto DxZkA;m_uvl:$request->getSession()->migrate(true);goto vVeyl;DxZkA:$Customers = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $buyerId]);goto veUF1;NrVzo:hzj2S:goto o4yeQ;f2Lr6:return false;goto NrVzo;vVeyl:$this->cartService->mergeFromPersistedCart();goto tTsd3;JkzyG:$this->tokenStorage->setToken($token);goto m_uvl;AEGml:XE2o_:goto oPiP_;veUF1:if (!(empty($Customers[0]) || !$Customers[0] instanceof \Eccube\Entity\Customer)) {goto hzj2S;}goto f2Lr6;o4yeQ:$token = new UsernamePasswordToken($Customers[0], null, 'customer', ['ROLE_USER']);goto JkzyG;oPiP_:$this->cartService->save();goto aZ7L7;tTsd3:foreach ($this->cartService->getCarts() as $Cart) {$this->purchaseFlow->validate($Cart, new PurchaseContext($Cart, $Customers[0]));obmY_:}goto AEGml;aZ7L7:return true;goto x1S1b;x1S1b:}}