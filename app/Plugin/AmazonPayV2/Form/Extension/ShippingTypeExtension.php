<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2021-07-20 10:45:27              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2\Form\Extension;use Eccube\Common\EccubeConfig;use Eccube\Entity\Payment;use Eccube\Exception\ShoppingException;use Eccube\Form\Type\Shopping\ShippingType;use Eccube\Repository\PaymentOptionRepository;use Plugin\AmazonPayV2\Service\Method\AmazonPay;use Symfony\Bridge\Doctrine\Form\Type\EntityType;use Symfony\Component\Form\AbstractTypeExtension;use Symfony\Component\Form\Extension\Core\Type\ChoiceType;use Symfony\Component\Form\FormEvent;use Symfony\Component\Form\FormEvents;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\HttpFoundation\RequestStack;use Symfony\Component\Validator\Constraints\NotBlank;class ShippingTypeExtension extends AbstractTypeExtension{public function __construct(RequestStack $requestStack, PaymentOptionRepository $paymentOptionRepository, EccubeConfig $eccubeConfig){goto XXFhC;doemX:$this->eccubeConfig = $eccubeConfig;goto do1IK;upsLI:$this->paymentOptionRepository = $paymentOptionRepository;goto doemX;XXFhC:$this->requestStack = $requestStack;goto upsLI;do1IK:}public function buildForm(FormBuilderInterface $builder, array $options){$self = $this;$builder->addEventListener(FormEvents::POST_SET_DATA, function (FormEvent $event) use($self) {goto sZujy;cgKrk:$referer = $request->headers->get('referer');goto EC8ni;j39rA:C3Kq_:goto keodi;A1Px5:return;goto B1oQ6;jJQgG:if (!(is_null($Shipping->getDelivery()) && ($Delivery = current($Deliveries)))) {goto sg9nz;}goto vxzsN;WYGRp:if (!(preg_match('/shopping\\/amazon_pay/', $uri) == true)) {goto rEa2q;}goto YaHUp;mjnPi:if (!($Payment && $Payment->getMethodClass() === AmazonPay::class && preg_match('/shopping_coupon/', $referer))) {goto C3Kq_;}goto OWp0x;NXk1Y:$Deliveries = $this->removeNotAmazonPayChoice($Deliveries);goto jJQgG;lQj1X:sg9nz:goto Dbf_T;keodi:$uri = $request->getUri();goto WYGRp;vxzsN:$Shipping->setDelivery($Delivery);goto mG5ae;sZujy:$Shipping = $event->getData();goto AHcop;B1oQ6:PsIyN:goto iZPQZ;OWp0x:return;goto j39rA;P42cH:$Payment = $Order->getPayment();goto mjnPi;iZPQZ:$request = $this->requestStack->getMasterRequest();goto cgKrk;YBxYD:rEa2q:goto uMUyp;Dbf_T:$this->addDeliveryForm($form, $Deliveries);goto YBxYD;YaHUp:$form = $event->getForm();goto Cfnkb;AHcop:if (!(null === $Shipping || !$Shipping->getId())) {goto PsIyN;}goto A1Px5;EC8ni:$Order = $Shipping->getOrder();goto P42cH;Cfnkb:$Deliveries = $this->getDeliveryChoices($form);goto NXk1Y;mG5ae:$Shipping->setShippingDeliveryName($Delivery->getName());goto lQj1X;uMUyp:});}private function getDeliveryChoices(FormInterface $form){return $form->get('Delivery')->getConfig()->getAttribute('choice_list')->getChoices();}private function removeNotAmazonPayChoice($Deliveries){goto ZnjvD;ZnjvD:foreach ($Deliveries as $key => $Delivery) {goto maEP6;maEP6:$PaymentOptions = $Delivery->getPaymentOptions();goto wZu0a;GSVmO:unset($Deliveries[$key]);goto jM_oK;uOWi_:foreach ($PaymentOptions as $PaymentOption) {goto VnBN8;sFnoM:$amazonPayFlg = true;goto SkACz;GgsbM:WHiFM:goto I90Nv;VnBN8:$Payment = $PaymentOption->getPayment();goto PSbER;PSbER:if (!($Payment->getMethodClass() === AmazonPay::class)) {goto WHiFM;}goto sFnoM;I90Nv:NSnpD:goto jB53q;SkACz:goto N10li;goto GgsbM;jB53q:}goto IR2lc;wZu0a:$amazonPayFlg = false;goto uOWi_;wmnbt:pG9zK:goto kPLW0;k6mNr:if ($amazonPayFlg) {goto eQyIq;}goto GSVmO;jM_oK:eQyIq:goto wmnbt;IR2lc:N10li:goto k6mNr;kPLW0:}goto Uz8VQ;ZR0ll:return $Deliveries;goto pf3MP;Uz8VQ:gV3d1:goto ZR0ll;pf3MP:}private function addDeliveryForm(FormInterface $form, array $choices){$form->add('Delivery', EntityType::class, ['required' => false, 'label' => 'shipping.label.delivery_hour', 'class' => 'Eccube\\Entity\\Delivery', 'choice_label' => 'name', 'choices' => $choices, 'placeholder' => false, 'constraints' => [new NotBlank()]]);}public function getExtendedType(){return ShippingType::class;}public static function getExtendedTypes() : iterable{return [ShippingType::class];}}