<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2021-07-20 10:45:27              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2\Form\Extension;use Eccube\Entity\Payment;use Eccube\Form\Type\Shopping\OrderType;use Plugin\AmazonPayV2\Service\Method\AmazonPay;use Symfony\Bridge\Doctrine\Form\Type\EntityType;use Symfony\Component\Form\AbstractTypeExtension;use Symfony\Component\Form\FormEvent;use Symfony\Component\Form\FormEvents;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\HttpFoundation\RequestStack;use Symfony\Component\Validator\Constraints\NotBlank;class OrderTypeExtension extends AbstractTypeExtension{public function __construct(RequestStack $requestStack){$this->requestStack = $requestStack;}public function buildForm(FormBuilderInterface $builder, array $options){goto nNSug;tDK4N:$self = $this;goto Vfumn;nNSug:if (!$options['skip_add_form']) {goto JmbTJ;}goto mx1nf;YMXPQ:JmbTJ:goto tDK4N;UY7mu:$builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) use($self) {goto iaDR5;jEfTS:$data['Payment'] = $Payment->getId();goto P0rVp;H_5Qs:$data = $event->getData();goto ZO6t5;Hohgn:$this->addPaymentForm($form, $Payments);goto MmAjh;OjslC:$data = $event->getData();goto jEfTS;P0rVp:$event->setData($data);goto ew8WN;xfO4E:GuaET:goto QU3mF;djP6g:xf2PN:goto wmSPm;iaDR5:$request = $this->requestStack->getMasterRequest();goto CWDcj;CWDcj:$uri = $request->getUri();goto Wqahr;Wqahr:if (preg_match('/shopping\\/amazon_pay/', $uri) == false) {goto xf2PN;}goto VXoJP;ESuBG:goto kdcQN;goto djP6g;lrfuM:if (!(is_null($Order->getPayment()) || $Order->getPayment()->getMethodClass() === AmazonPay::class)) {goto qJoHG;}goto H_5Qs;wmSPm:$form = $event->getForm();goto ZDgEs;ZO6t5:foreach ($Payments as $key => $Payment) {goto FgBvI;vrNlM:$event->setData($data);goto hRESZ;FgBvI:if (!(!isset($data['Payment']) && $Payment->getMethodClass() === AmazonPay::class)) {goto i8HR3;}goto LlPiG;LlPiG:$data['Payment'] = $Payment->getId();goto vrNlM;hRESZ:i8HR3:goto OtFaN;OtFaN:g2DUn:goto d116N;d116N:}goto xfO4E;QU3mF:qJoHG:goto ESuBG;QawSH:$Order->setPaymentMethod($Payment->getMethod());goto bTER_;sTLGy:if (!((is_null($Order->getPayment()) || $Order->getPayment()->getMethodClass() === AmazonPay::class) && ($Payment = current($Payments)))) {goto QkH8M;}goto vqgCl;bTER_:$Order->setCharge($Payment->getCharge());goto OjslC;MmAjh:kdcQN:goto H8G2Z;VXoJP:$form = $event->getForm();goto aDXea;BfbuJ:$Payments = $this->getPaymentChoices($form);goto lrfuM;ZDgEs:$Order = $form->getData();goto mgoAp;aDXea:$Order = $form->getData();goto BfbuJ;m8d67:$Payments = $this->removeAmazonPayChoice($Payments);goto sTLGy;mgoAp:$Payments = $this->getPaymentChoices($form);goto m8d67;vqgCl:$Order->setPayment($Payment);goto QawSH;ew8WN:QkH8M:goto Hohgn;H8G2Z:});goto M7AMq;mx1nf:return;goto YMXPQ;Vfumn:$builder->addEventListener(FormEvents::POST_SET_DATA, function (FormEvent $event) use($self) {goto RGYeE;Hl6vZ:$Order->setPayment($Payment);goto hGRgM;IHe5a:if (!(null === $Order || !$Order->getId())) {goto bR8Se;}goto xSsGp;DnuXy:if (!((is_null($Order->getPayment()) || $Order->getPayment()->getMethodClass() === AmazonPay::class) && ($Payment = current($Payments)))) {goto wP50z;}goto Hl6vZ;uSId_:if (!($Payment && $Payment->getMethodClass() === AmazonPay::class && preg_match('/shopping_coupon/', $referer))) {goto qywig;}goto S3ZV0;RGYeE:$Order = $event->getData();goto IHe5a;QaQwc:wykGn:goto AMoS0;C19IB:$referer = $request->headers->get('referer');goto lKEd0;mu3Fa:$form = $event->getForm();goto rxfz7;ifxgp:bR8Se:goto pBj2n;xSsGp:return;goto ifxgp;LvOq1:$uri = $request->getUri();goto AJmah;rxfz7:$Payments = $this->getPaymentChoices($form);goto FmBpT;FmBpT:$Payments = $this->removeAmazonPayChoice($Payments);goto DnuXy;S3ZV0:return;goto vmFTm;AJmah:if (!(preg_match('/shopping\\/amazon_pay/', $uri) == false)) {goto wykGn;}goto mu3Fa;vmFTm:qywig:goto LvOq1;hGRgM:$Order->setPaymentMethod($Payment->getMethod());goto dbtr6;AVQHw:$this->addPaymentForm($form, $Payments, $Order->getPayment());goto QaQwc;pBj2n:$request = $this->requestStack->getMasterRequest();goto C19IB;dbtr6:$Order->setCharge($Payment->getCharge());goto aUIU0;aUIU0:wP50z:goto AVQHw;lKEd0:$Payment = $Order->getPayment();goto uSId_;AMoS0:});goto UY7mu;M7AMq:}private function getPaymentChoices(FormInterface $form){return $form->get('Payment')->getConfig()->getAttribute('choice_list')->getChoices();}private function removeAmazonPayChoice($Payments){goto XJFMB;vGJ31:return $Payments;goto xREsQ;XJFMB:foreach ($Payments as $key => $Payment) {goto GJ39W;VvYG_:unset($Payments[$key]);goto ec30p;ec30p:Yxnj_:goto bKd6f;bKd6f:lkjf4:goto YlJZ5;GJ39W:if (!($Payment->getMethodClass() === AmazonPay::class)) {goto Yxnj_;}goto VvYG_;YlJZ5:}goto ZoJb7;ZoJb7:xygUn:goto vGJ31;xREsQ:}private function addPaymentForm(FormInterface $form, array $choices, Payment $data = null){goto uDXId;MXb4H:if (!empty($choices)) {goto XZvYe;}goto hVdaI;qFZGu:XZvYe:goto t6e0I;uDXId:$message = trans('front.shopping.payment_method_unselected');goto MXb4H;hVdaI:$message = trans('front.shopping.payment_method_not_fount');goto qFZGu;t6e0I:$form->add('Payment', EntityType::class, ['class' => Payment::class, 'choice_label' => 'method', 'expanded' => true, 'multiple' => false, 'placeholder' => false, 'constraints' => [new NotBlank(['message' => $message])], 'choices' => $choices, 'data' => $data, 'invalid_message' => $message]);goto TxtVi;TxtVi:}public function getExtendedType(){return OrderType::class;}public static function getExtendedTypes() : iterable{return [OrderType::class];}}